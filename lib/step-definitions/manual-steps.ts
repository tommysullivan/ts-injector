import { binding as steps, given, when, then } from "cucumber-tsflow";
import Framework from "../framework/framework";
declare var $:Framework;
declare var module:any;

@steps()
export default class ManualSteps {
    @given(/^I the local destination file already exists$/)
    @given(/^I am viewing a test result in test portal$/)
    @given(/^it updates tagged JIRA issues with test result statuses$/)
    @given(/^I have marked a Scenario with the @Manual tag$/)
    @given(/^I have run bin\/run\-end\-to\-end\-tests against some @Manual and some automated tests$/)
    @given(/^the CI Server is running$/)
    @given(/^I view the result in the CI Server$/)
    @given(/^I can see the automated test results in a hierarchical view$/)
    @given(/^I have changed manual test results$/)
    @given(/^I am notified that the save has succeeded$/)
    @given(/^if I navigate to the Test Result Explorer$/)
    @given(/^click back into the previously saved test result$/)
    @given(/^I see it has retained my changes$/)
    @given(/^I am viewing a Test Result or the Test Result Explorer$/)
    @given(/^all the charts and summaries and statuses update to reflect the filtered view of the test$/)
    @given(/^I want to make sure the health check is accurate$/)
    @given(/^I only see the manual tests$/)
    @given(/^I only see the automated tests$/)
    @given(/^I can see both automated and manual tests$/)
    @given(/^I have some tests that are not associated with a JIRA ticket$/)
    @given(/^I only see those features \/ scenarios that have no JIRA ticket$/)
    @given(/^I have tests with various statuses$/)
    @given(/^I check and uncheck the statuses in the upper right$/)
    @given(/^the view and charts update to reflect only the subset of features \/ scenarios with the matching statuses$/)
    @given(/^I have tested a JQL Query using JIRA and know it to work$/)
    @given(/^I paste that JQL query into the JQL text input$/)
    @given(/^the view filters to show only those tickets which are associated with the JIRA tickets in the JQL result$/)
    @given(/^I search for tags directly by typing them or indirectly via JQL that have no test cases$/)
    @given(/^I see a warning indicating how many tags were found \/ not found \/ sought$/)
    @given(/^I see the names of the tags that were not found$/)
    @given(/^I have some scenarios with a @SPYG\-XXX tag$/)
    @given(/^I click said tag name where it appears$/)
    @given(/^I am taken to the JIRA ticket page for that tag$/)
    @given(/^I have an up to date test result with some scenarios with @SPYG\-XXX JIRA tags$/)
    @given(/^I am notified that the results have been synced$/)
    @given(/^when I view the JIRA ticket\(s\) that should have been updated$/)
    @given(/^I see comments in each ticket summing up the status of that ticket's test$/)
    @given(/^I see summaries of scenarios, features and steps passed \/ failed \/ pending \/ not exected$/)
    @given(/^I see a link that takes me to the CI Portal displaying just that story's results using pre\-filtered query$/)
    @given(/^I want to publish a test result from my local computer to the CI server$/)
    @given(/^I do an HTTP PUT to ci\-server\-host\/test\-results\/my\-test\-result\-name\-here$/)
    @given(/^I see the test result in the Test Result Explorer$/)
    @given(/^I can open and view the test$/)
    @given(/^it tells me how to install, configure and run the services required for Spyglass$/)
    @given(/^it tells me how to discover the URLs for MCS, Kibana, Grafana, OpenTSDB and ElasticSearch$/)
    @given(/^I have logged into Grafana$/)
    @given(/^I navigate to the node dashboard$/)
    @given(/^I navigate to kibana's discovery interface$/)
    @given(/^I see at least one log from warden$/)
    @given(/^I have determined the kibana server and port for that cluster$/)
    @given(/^I can authenticate my browser using the GUI Installer Login Page$/)
    @given(/^I indicate I want a basic installation with Spyglass components and their dependencies only$/)
    @given(/^I have determined the grafana server and port for that cluster$/)
    @given(/^the GUI Installer web server is running$/)
    manualStep0():void {}

    @when(/^I click "([^"]*)"$/)
    @given(/^the manual steps are editable and in a "([^"]*)" state$/)
    @given(/^I type in "([^"]*)"$/)
    @given(/^I also see items that do not have @tag(\d+)$/)
    @given(/^I change the filter to "([^"]*)"$/)
    @given(/^I check "([^"]*)"$/)
    @given(/^I receive a (\d+) OK$/)
    @given(/^I follow the manual installation instructions located at "([^"]*)"$/)
    @given(/^it has been populated with reports as described in "([^"]*)"$/)
    @given(/^I look for the following metrics$/)
    @given(/^I see the corresponding graph with reasonably accurate data for the past (\d+) hours$/)
    @given(/^the website indicates that the installation succeeds within "([^"]*)" minutes$/)
    @given(/^my grafana username is "([^"]*)"$/)
    @given(/^my grafana password is "([^"]*)"$/)
    manualStep1(arg1:any):void {}

    @given(/^the view updates to only show features \/ scenarios tagged with either @tag(\d+) or @tag(\d+)$/)
    manualStep2(arg1:any, arg2:any):void {}
}
module.exports = ManualSteps;